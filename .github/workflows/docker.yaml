name: Docker Image Pull and Push

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"  # e.g. "registry.cn-hangzhou.aliyuncs.com"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull and Push Images
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Debug: Print environment variables (masked)
    - name: Debug Variables
      run: |
        echo "ALIYUN_REGISTRY=${ALIYUN_REGISTRY}"
        echo "ALIYUN_NAME_SPACE=${ALIYUN_NAME_SPACE}"
        echo "ALIYUN_REGISTRY_USER=${ALIYUN_REGISTRY_USER}"
        echo "ALIYUN_REGISTRY_PASSWORD length=${#ALIYUN_REGISTRY_PASSWORD}"

    # Test network connectivity
    - name: Test Registry Connectivity
      run: |
        ping -c 3 $ALIYUN_REGISTRY || true
        nslookup $ALIYUN_REGISTRY || true
        curl -v https://$ALIYUN_REGISTRY/v2/ || true

    # Free up disk space
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Docker Setup
      uses: docker/setup-buildx-action@v3

    # Secure login using --password-stdin
    - name: Login to Aliyun Container Registry
      run: |
        echo "$ALIYUN_REGISTRY_PASSWORD" | docker login -u $ALIYUN_REGISTRY_USER --password-stdin $ALIYUN_REGISTRY

    - name: Process Images
      run: |
        # Create a clean working directory
        mkdir -p ./tmp
        cd ./tmp
        
        # Process images.txt
        declare -A duplicate_images
        declare -A temp_map
        
        # Read from the original images.txt in repository root
        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            name_space="${name_space}_"
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 if [[ "${temp_map[$image_name]}" != $name_space ]]; then
                    duplicate_images[$image_name]="true"
                 fi
            else
                temp_map[$image_name]=$name_space
            fi       
        done < ../images.txt
        
        # Process each image
        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            echo "Processing: $line"
            docker pull $line
            
            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            [ -z "$platform" ] && platform_prefix="" || platform_prefix="${platform//\//_}_"
            
            image=$(echo "$line" | awk '{print $NF}')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            image_name_tag="${image_name_tag%%@*}"
            
            name_space_prefix=""
            [[ -n "${duplicate_images[$image_name]}" && -n "${name_space}" ]] && name_space_prefix="${name_space}_"
            
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            
            echo "Tagging: $image -> $new_image"
            docker tag $image $new_image
            
            echo "Pushing: $new_image"
            docker push $new_image
            
            echo "Cleaning up..."
            docker rmi $image $new_image
            
        done < ../images.txt
